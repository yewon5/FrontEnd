1. 특징
(1) 스크립트 언어
(2) 객체 기반 언어 (<-> 객체 지향 언어)
    복잡한 데이터를 간단하게 묶어서 사용가능 하도록 만든 형태

2. 사용 방법 
(1) inline
(2) internal
(3) external

3. 주석
    // 한줄 주석
    /* */ 여러줄 주석

4. 문법
(1) 변수(Variable) : 변할 수 있는 값을 저장할 수 있는 임시 기억(저장:램 주기억장치) 장소 (<-> 상수:변경할 수 없는 값)
    1) 변수 선언 
        var(사용x), let(같은 장소를 재사용, 공간 낭비x), const(상수)
    2) 변수 표기법 ★
        *. dash-case(kebab-case)
                the-quick-brown-fox
        *. snake_case (HTML,CSS)
                the_quick_brown_fox
        *. camelCase (JS)   
                theQuickBrownFox
        *. PascalCase (JS)
                TheQuickBrownFox

(2) Data Type #02_datatype
    1)String
    2)Number
    3)Boolean
    4)Undefined
    5)Null
    6)Object 
    7)Array
    8)Functiona ★★★★★

(3) Operator #03_Operator
    1) 산술 연산자(Arithmetic)
    2) 비교 연산자(Compare)
    3) 논리 연산자(Logical)
    4) 할당 연산자(Assign)

(4) Control Statement(제어문) #04_Control_condition
    1) 조건문(if, switch) 
        if(조건문){ /조건이 참이라는 전제를 기준
            실행할 코드 작성
        } 
        --------------------------------------
        if(조건문){ 
            실행할 코드 작성
        }else{
            실행할 코드
        }
        --------------------------------------
        if(조건문){ ex)학점계산
            실행할 코드 작성
        }else if(조건문) {
            실행할 코드
        }else if(조건문) {
            실행할 코드
        }
        ...
        else { 생략 가능
            실행할 코드
        }
        --------------------------------------
        switch(수식, 변수) {
            case '값':
                    실행할 코드;
                    break;
            case '값':
                    실행할 코드;
                    break;
                ...
            default: 생략가능
                    실행할 코드;
        }
        --------------------------------------
        조건문의 중첩★
        if(조건문){
                코드
                ...
                if(조건문){
                        코드
                }
        }

    2) 반복문 (while, do-while, for) #05_Control_loop
        while(조건){ /조건이 참일 동안 해당코드를 실행해라
            실행할 코드;
        }

                주의할점 2가지
                    1.무한반복 검증필수
                    2.반복횟수

                반복문의 구조 3가지
                    1.초기화 : 변수를 처음 선언할때 값을 넣는
                    2.조건문
                    3.카운터
        --------------------------------------
        do{ /일단 1회는 실행하자
            실행할 코드;
        }while(조건);
        --------------------------------------
        for(초기화; 조건식; 카운터){
            실행할 코드;
        }
        --------------------------------------
        반복문의 강제 중지
            - break : 완전 종료
            - continue : 일시 종료

        반복문의 중첩
    
(5)Functiona #06_Functiona1
    1) 함수를 사용하는 이유
        - 재사용성(유지보수) : 특정파일만 꺼내는 것을 모듈화라고 함=컴퍼넌트
        - 생산성 

    2) 함수 작성 방법
        - 선언문
        Function 함수명(...){
            코드
        }

        무명함수(익명함수), 표현식
            변수 = Function() { 코드 }
            변수(); <ㅡ 호출 방법

        - 화살표 함수(Array Function)
            변수 = () => {코드}



    3) 호출 방식 #06_Functiona1
        - 인자가 없는 방식 (); 비어있음
        - 인자가 있는 방식
        - 반환값이 있는 방식
                return
                    *. 값을 반환(반드시 1개만 리턴 가능)
                    *. 함수를 강제 종료 /리턴을 만나면 원위치로 돌아감

    4) built-in Function #07_built_in_Functiona1

(6) DOM(Document Object Model) ★★★★★
    1) 특징
        - HTML문서를 객체로 표현한 것
        - DOM API(application programming interface):DOM에서 사용할 수 있는 여러가지 명령어(함수)
    
    2) Node vs Element #08_DOM1
        - Node : HTML 요소, 텍스트, 주석 등 모든 것을 의미
        - Element : HTML요소(태그), Node의 하위 개념
    
    3) 검색
        - document.getElementById() : id 속성으로 검색 ★
        - document.getElementsByTagName() : 태그명으로 검색 /s복수형
        - document.querySelector() : CSS 선택자로 검색 ★
        - document.querySelectorAll() : CSS 선택자로 검색한 모든 요소
        ------------------------------------------------------------
        - Node.paremtElement : 노드의 부모 요소를 반환
        - Element.closest() : 자신을 포함한 조상 요소 중 'css선택자'와 일치하는 가장 가까운 요소를 반환
        - N.previousSibling / N.nextSibling : 노드의 이전 형제 또는 다음 형제 노드를 반환
        - E.children : 요소의 모든 자식을 반환
        - E.firstElementChild / E.lastElementChild

    4) 생성, 조회, 수정 #10_DOM2
        - document.createElement() : 메모리에만 존재하는 새로운 HTML 요소를  생성하고 반환
        - E.prepend(), E.append() : 노드를 첫번째 혹은 마지막 자식으로 삽입 (여러개 추가 가능)
        - E.remove() : 요소 제거
        - E.insertAdjacentElement() : 대상 요소의 지정한 위치에 새로운 요소를 삽입
                insertAdjacentElement(위치, 새로운 요소)
                
                <!-- beforebegin -->
                <div class="target">
                    <!-- afterbegin -->
                    내용
                    <!-- beforeend -->
                </div>
                <!-- afterend -->
        - N.insertBefore(추가할 노드, 참조할 노드) : 부모노드의 자식인 참조노드의 이전 형제로 노드를 추가
        - N.contains(주어진 노드) : 주어진 노드가 자신을 포함한 후손인지 확인
        . N.textContent : 노드의 모든 텍스트를 얻거나 변경한다.
        - E.innerHTML : 요소의 모든 HTML내용을 하나의 문자로 가져오거나, 새로운 HTML을 지정한다
        - E.innerText
        - E.dataset : 'data-' 속성값을 얻거나 지정한다. 태그에 데이터 저장
        - E.tagName : 요소의 태그명을 반환 
        - E.id : 요소의 id 속성값을 얻거나 지정한다.
        - E.className : 요소의 class 속성값을 얻거나 지정한다.
        - E.classList : 요소의 class 속성값을 제어
            .add() .remove() .toggle() .contains()
        - E.getAttribute("속성명"), E.setAttribute("속성명","값");
        - E.hasAttribute("속성명")
        - E.removeAttribute("속성명")
        - E.style : 요소의 style 속성의 css속성값을 얻거나 지정한다.
        - window.getComputedStyle() : 요소에 적용된 스타일 객체를 반환

(7) Function2 
    1) 호이스팅(Hoisting) : 함수가 선언되어 있는 코드를 유효한 범위내에서 
    제일 상위로 끌어올려서 동작하게 하는 개념 #12_Hoisting

    2) 자바스크립트는 함수를 자료형으로 처리한다.

    3) 매개변수 : 실인자나 매개변수의 갯수와 순서가 똑같아야한다 #13_Parameter
        - Default Value
        - 객체/배열의 구조 분해 할당(Destructuring Assignment)
        - rest 매개변수 (나머지)

    4) 화살표 함수 ★★★★★
        Function 함수명() {코드} //미리 선언하고 사용하는 방식
        Function () {코드} //일회용. 재사용하려면 앞에 변수를 선언해 준다.
        () => {코드}
        ----------------------------------------------------
            const a = ( ) => { } : 매개변수가 없을 때에는 ( )는 생략 불가
            const a = x => { } : 매개변수가 1개일때 ( ) 생략 가능
            const a = (x, y) => { } : 매개변수가 2개 이상일 경우 ( ) 생략 불가

        - 코드 작성시
            const a = x => {return x*x}
            const a = x => x*x : return을 생략할 때는 { }를 생략한다.
            const a = x => {
                console.log(x*x);
                return x*x
            } : 여러줄일경우 { }와 return 생략 불가

        - 객체 사용시
            const a = ( ) => {return {x:1}}
            const a = ( ) => {x:1} : 오류. 코드를 묶는 것과 객체를 묶어 주는 괄호가 똑같아서 생략 불가
            const a = ( ) => ({x:1}) : 가능.  ( )로 묶어준다.

        - 배열 사용시
            const a = ( ) => {return [1, 2, 3]}
            const a = ( ) => [1, 2, 3] : 가능. 괄호가 달라서 리턴/중괄호 생략 가능

    5) 콜백 함수 ★★★★★ #14_Callback
        함수가 실행될때 인자로 들어가는 또 다른 함수

    6) 재귀 함수 : 반복문이랑 비슷함. 주로 알고리즘에서 쓰임
        Function a() {
            ...
            a();
        }

        a();

(8) 클래스 = 객체 (변수와 함수를 묶어 준다, 복잡하고 많은 데이터) #15_UserDefineObject
    1) 객체 생성 방법
        1. 
        객체명 = { 키 : 값, ... }

        2. 
        obj = new Object(); /빈 그릇을 하나 만들고
        obj.title = "노인과 바다"; /변수 담기
        obj.author = "헤밍웨이";
        obj.setValue = Function(t,a) {
            this.title = t;
            this.author = a;
        })

        3.
        객체명 = Function(파라미터) {
            this.변수 = 파라미터;
            ...
        }

        4.
        객체명.prototype.함수명 = Function(파라미터) { /함수 객체 동시에 만든다.
            this.변수 = 파라미터;
        } 

        5.
        new 객체명();

    2) 표준 내장 객체 #16_window #16_zipcode
        - Array
            length
            concat(), join(), reverse(), sort(), slice(), ...
        - Date 
            getFullYear(), getMonth(), getDate(), getDay(), getHour(), ...
        - Math
            pow(), ceil(), round(), floor(), random(), abs(), ...
        - string ★★★★
            toLowerCase(), toUpperCase(), charAt(), concat(), indexOf(), split(), substr(),...
        - Window (브라우저 내장 객체) ex) window.alret() 
            location(객체)
                href, reload()
            history
                back()
            navigator
            document
                link
                anchor
                images
                layer
                form
                    text, textarea, password, radio, checkbox, button, select, reset, submit

(9) 이벤트 : html을 가장 동적으로 꾸며준다. #17_event1
    1) 3가지 구성 요소
        - 이벤트 소스 : where? 어디에서 사건이 발생했는지 알아야해!
            HTML요소. 주로 input

        - 이벤트 클래스 : what? 이젠 사건의 종류를 살펴보자!
            onclick, onblur, onmouseover, onmouseout, onselect, onsubmit, onreset, onload
            ondbclick, ondragdrop, onkeydown, onkeyup, onkeypress, onmove, onresize, ...

        - 이벤트 핸들러 : 함수

    2) 이벤트 등록 및 해제 #18_event2
        addEventListener(이벤트 클래스, 이벤트 핸들러, 캡처 타입) //세번째인자는 값이 없으면 false 매소드
        removeEventListener(이벤트 클래스, 이벤트 핸들러, 캡처 타입)

    3) 이벤트 정보 확인 : 매개변수를 통해서 확인

    4) 기본 동작 방지 : preventDefault() #19_event3

    5) 버블링과 캡처링 : 이벤트 전파(Propagation) 방식 #20_event4
        - 캡처링은 addEventListener의 세번째 인자인 capture 단계를 false로 지정하여 방지
        - 버블링은 stopPropagation()를 호출하여 방지

    6) 이벤트 옵션
        addEventListener(이벤트 클래스, 이벤트 핸들러, 옵션) 
            - once : 핸들러를 한 번만 실행하게 해주는 옵션
            - passive : 기본 동작과 핸들러의 실행을 분리시켜주는 옵션
    
    7) 이벤트 위임(Delegate) #21_Event5

    8) 마우스와 포인터 이벤트 //태그나 객체 앞에는 on붙여줘야 한다.
        click, dblclick, mousedown, mouseup, mouseenter, mouseleave, mousemove, contextmenu, wheel

    9) 키보드 이벤트 #23_Event7 #24_Event8
        keydown, keyup, focus, blur, input, change, submit, reset

    10) 디스패치 이벤트 : dispatchEvent
        - 강제로 이벤트를 발생시킬 때 사용
    
(10) 모듈 #Module Test
    - js파일들끼리 데이터를 내보내기와 가져오기를 하는 방법
    - export 내보내기, import 가져오기
    - <script type='module' src="js"> ★module 불러오기 잊지말자★

(11) 정규 표현식 (Regular Expression) ★★★★★
    1) 정의 : 문자열에서 특정 문자 조합을 찾기 위한 패턴 

    2) 용도
        - 문자 검색(Search)
        - 문자 대체(Replace)
        - 문자 추출(Extract)

    3) 사용법
        - 객체 생성 방식
            new RegExp('패턴 표현식', 플래그(옵션)) /패턴을 찾기 위한 표현식
            - 플래그
                g : 모든 문자와 일치(global)
                i : 영어 대소문자 구별하지 않고 일치(ignore case)
                m : 여러 줄 일치(multi), 각각의 줄을 시작과 끝으로 인식 (전체줄 인식)
        - 리터럴 방식
            /패턴 표현식/플래그 

    4) API
        패턴 표현식.test(문자열) : 일치 여부 확인
        문자열.match(패턴 표현식) : 일치하는 문자의 배열을 반환 /검색+추출
        문자열.replace(패턴 표현식, 대체문자) : 일치하는 문자를 대체

    5) 패턴 표현식
        ^ab : 줄(line) 시작에 있는 ab와 일치 → abcd 가능 zxcv 불가능
        ab$ : 줄(line) 끝에 있는 ab와 일치
        . : 임의의 한 문자와 일치 → a.b : aab, abb, acb, adb 모든 문자 대체
        a | b : a 또는 b와 일치
        ab? : b가 없거나 b와 일치 (물음표 앞에 있는 문자)

        {n} : n개 연속 일치 → a{3} : aaa
        {n,} : n개 이상 연속 일치 → a{3,} : aaa, aaaa, aaaaa, ...
        {n,m} : n개 이상 m개 이하 연속 일치 → a{3,5} : aaa, aaaa, aaaaa
        + : 1회 이상 연속 일치 → a+ : a, aa, aaa, ... /{1,}이것과 같음
        * : 0회 이상 연속 일치 → a* : ' ', a, aa, aaa, ...

        [ab] : a 또는 b → 강[남북]구 : 강남구, 강북구
        [a-z] : a부터 z사이의 문자 구간 일치(소문자) ASCII코드
        [A-Z] : A부터 Z사이의 문자 구간 일치(대문자)
        [0-9] : 0부터 9사이의 문자 구간 일치(숫자)
        [가-힣] : 한글의 모든 구간 일치(한글)
        [a-zA-Z] : 대소문자 섞어서 알파벳만 일치
        [^ab] : ab를 제외한 모든 문자 구간 일치(^를 맨 앞에 사용 시)

        \w : word(63개 문자 : 대소문자 52개 + 숫자 10개 + _) 일치 → a\wb
        \W : \w에 해당하지 않는 나머지 문자에 일치
        \d : digit(숫자)에 일치 → [0-9]와 같음
        \s : space, tap 등에 일치하는
        \S : \s에 해당하지 않는 나머지 문자에 일치
        \ : 특수 기능 해제(escape)

        (?:) : 그룹 지정
        (?=) : 앞쪽 일치
        (?<=) : 뒤쪽 일치
        

        참고사이트 : https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html

(12) JQuery
